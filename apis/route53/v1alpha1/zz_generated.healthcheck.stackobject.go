/*
Copyright Â© 2019 AWS Controller authors

Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"fmt"
	"reflect"
	"strings"

	metav1alpha1 "go.awsctrl.io/manager/apis/meta/v1alpha1"
	controllerutils "go.awsctrl.io/manager/controllers/utils"
	cfnencoder "go.awsctrl.io/manager/encoding/cloudformation"

	"github.com/awslabs/goformation/v4/cloudformation"
	"github.com/awslabs/goformation/v4/cloudformation/route53"
	"k8s.io/client-go/dynamic"
)

// GetNotificationARNs is an autogenerated deepcopy function, will return notifications for stack
func (in *HealthCheck) GetNotificationARNs() []string {
	notifcations := []string{}
	for _, notifarn := range in.Spec.NotificationARNs {
		notifcations = append(notifcations, *notifarn)
	}
	return notifcations
}

// GetTemplate will return the JSON version of the CFN to use.
func (in *HealthCheck) GetTemplate(client dynamic.Interface) (string, error) {
	if client == nil {
		return "", fmt.Errorf("k8s client not loaded for template")
	}
	template := cloudformation.NewTemplate()

	template.Description = "AWS Controller - route53.HealthCheck (ac-{TODO})"

	template.Outputs = map[string]interface{}{
		"ResourceRef": map[string]interface{}{
			"Value": cloudformation.Ref("HealthCheck"),
		},
	}

	route53HealthCheck := &route53.HealthCheck{}

	if !reflect.DeepEqual(in.Spec.HealthCheckConfig, HealthCheck_HealthCheckConfig{}) {
		route53HealthCheckHealthCheckConfig := route53.HealthCheck_HealthCheckConfig{}

		if in.Spec.HealthCheckConfig.SearchString != "" {
			route53HealthCheckHealthCheckConfig.SearchString = in.Spec.HealthCheckConfig.SearchString
		}

		if in.Spec.HealthCheckConfig.ResourcePath != "" {
			route53HealthCheckHealthCheckConfig.ResourcePath = in.Spec.HealthCheckConfig.ResourcePath
		}

		if in.Spec.HealthCheckConfig.Port != route53HealthCheckHealthCheckConfig.Port {
			route53HealthCheckHealthCheckConfig.Port = in.Spec.HealthCheckConfig.Port
		}

		if in.Spec.HealthCheckConfig.Inverted || !in.Spec.HealthCheckConfig.Inverted {
			route53HealthCheckHealthCheckConfig.Inverted = in.Spec.HealthCheckConfig.Inverted
		}

		if in.Spec.HealthCheckConfig.MeasureLatency || !in.Spec.HealthCheckConfig.MeasureLatency {
			route53HealthCheckHealthCheckConfig.MeasureLatency = in.Spec.HealthCheckConfig.MeasureLatency
		}

		if in.Spec.HealthCheckConfig.HealthThreshold != route53HealthCheckHealthCheckConfig.HealthThreshold {
			route53HealthCheckHealthCheckConfig.HealthThreshold = in.Spec.HealthCheckConfig.HealthThreshold
		}

		if !reflect.DeepEqual(in.Spec.HealthCheckConfig.AlarmIdentifier, HealthCheck_AlarmIdentifier{}) {
			route53HealthCheckHealthCheckConfigAlarmIdentifier := route53.HealthCheck_AlarmIdentifier{}

			if in.Spec.HealthCheckConfig.AlarmIdentifier.Name != "" {
				route53HealthCheckHealthCheckConfigAlarmIdentifier.Name = in.Spec.HealthCheckConfig.AlarmIdentifier.Name
			}

			if in.Spec.HealthCheckConfig.AlarmIdentifier.Region != "" {
				route53HealthCheckHealthCheckConfigAlarmIdentifier.Region = in.Spec.HealthCheckConfig.AlarmIdentifier.Region
			}

			route53HealthCheckHealthCheckConfig.AlarmIdentifier = &route53HealthCheckHealthCheckConfigAlarmIdentifier
		}

		if in.Spec.HealthCheckConfig.FullyQualifiedDomainName != "" {
			route53HealthCheckHealthCheckConfig.FullyQualifiedDomainName = in.Spec.HealthCheckConfig.FullyQualifiedDomainName
		}

		if in.Spec.HealthCheckConfig.FailureThreshold != route53HealthCheckHealthCheckConfig.FailureThreshold {
			route53HealthCheckHealthCheckConfig.FailureThreshold = in.Spec.HealthCheckConfig.FailureThreshold
		}

		if in.Spec.HealthCheckConfig.InsufficientDataHealthStatus != "" {
			route53HealthCheckHealthCheckConfig.InsufficientDataHealthStatus = in.Spec.HealthCheckConfig.InsufficientDataHealthStatus
		}

		if in.Spec.HealthCheckConfig.RequestInterval != route53HealthCheckHealthCheckConfig.RequestInterval {
			route53HealthCheckHealthCheckConfig.RequestInterval = in.Spec.HealthCheckConfig.RequestInterval
		}

		if len(in.Spec.HealthCheckConfig.ChildHealthChecks) > 0 {
			route53HealthCheckHealthCheckConfig.ChildHealthChecks = in.Spec.HealthCheckConfig.ChildHealthChecks
		}

		if len(in.Spec.HealthCheckConfig.Regions) > 0 {
			route53HealthCheckHealthCheckConfig.Regions = in.Spec.HealthCheckConfig.Regions
		}

		if in.Spec.HealthCheckConfig.Type != "" {
			route53HealthCheckHealthCheckConfig.Type = in.Spec.HealthCheckConfig.Type
		}

		if in.Spec.HealthCheckConfig.IPAddress != "" {
			route53HealthCheckHealthCheckConfig.IPAddress = in.Spec.HealthCheckConfig.IPAddress
		}

		if in.Spec.HealthCheckConfig.EnableSNI || !in.Spec.HealthCheckConfig.EnableSNI {
			route53HealthCheckHealthCheckConfig.EnableSNI = in.Spec.HealthCheckConfig.EnableSNI
		}

		route53HealthCheck.HealthCheckConfig = &route53HealthCheckHealthCheckConfig
	}

	route53HealthCheckHealthCheckTags := []route53.HealthCheck_HealthCheckTag{}

	for _, item := range in.Spec.HealthCheckTags {
		route53HealthCheckHealthCheckTag := route53.HealthCheck_HealthCheckTag{}

		if item.Value != "" {
			route53HealthCheckHealthCheckTag.Value = item.Value
		}

		if item.Key != "" {
			route53HealthCheckHealthCheckTag.Key = item.Key
		}

	}

	if len(route53HealthCheckHealthCheckTags) > 0 {
		route53HealthCheck.HealthCheckTags = route53HealthCheckHealthCheckTags
	}

	template.Resources = map[string]cloudformation.Resource{
		"HealthCheck": route53HealthCheck,
	}

	// json, err := template.JSONWithOptions(&intrinsics.ProcessorOptions{NoEvaluateConditions: true})
	json, err := template.JSON()
	if err != nil {
		return "", err
	}

	return string(json), nil
}

// GetStackID will return stackID
func (in *HealthCheck) GetStackID() string {
	return in.Status.StackID
}

// GenerateStackName will generate a StackName
func (in *HealthCheck) GenerateStackName() string {
	return strings.Join([]string{"route53", "healthcheck", in.GetName(), in.GetNamespace()}, "-")
}

// GetStackName will return stackName
func (in *HealthCheck) GetStackName() string {
	return in.Spec.StackName
}

// GetTemplateVersionLabel will return the stack template version
func (in *HealthCheck) GetTemplateVersionLabel() (value string, ok bool) {
	value, ok = in.Labels[controllerutils.StackTemplateVersionLabel]
	return
}

// GetParameters will return CFN Parameters
func (in *HealthCheck) GetParameters() map[string]string {
	params := map[string]string{}
	cfnencoder.MarshalTypes(params, in.Spec, "Parameter")
	return params
}

// GetCloudFormationMeta will return CFN meta object
func (in *HealthCheck) GetCloudFormationMeta() metav1alpha1.CloudFormationMeta {
	return in.Spec.CloudFormationMeta
}

// GetStatus will return the CFN Status
func (in *HealthCheck) GetStatus() metav1alpha1.ConditionStatus {
	return in.Status.Status
}

// SetStackID will put a stackID
func (in *HealthCheck) SetStackID(input string) {
	in.Status.StackID = input
	return
}

// SetStackName will return stackName
func (in *HealthCheck) SetStackName(input string) {
	in.Spec.StackName = input
	return
}

// SetTemplateVersionLabel will set the template version label
func (in *HealthCheck) SetTemplateVersionLabel() {
	if len(in.Labels) == 0 {
		in.Labels = map[string]string{}
	}

	in.Labels[controllerutils.StackTemplateVersionLabel] = controllerutils.ComputeHash(in.Spec)
}

// TemplateVersionChanged will return bool if template has changed
func (in *HealthCheck) TemplateVersionChanged() bool {
	// Ignore bool since it will still record changed
	label, _ := in.GetTemplateVersionLabel()
	return label != controllerutils.ComputeHash(in.Spec)
}

// SetStatus will set status for object
func (in *HealthCheck) SetStatus(status *metav1alpha1.StatusMeta) {
	in.Status.StatusMeta = *status
}
