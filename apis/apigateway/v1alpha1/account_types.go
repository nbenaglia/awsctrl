/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"strings"

	metav1alpha1 "awsctrl.io/apis/meta/v1alpha1"
	controllerutils "awsctrl.io/controllers/utils"
	cfnencoder "awsctrl.io/encoding/cloudformation"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AccountSpec defines the desired state of Account
type AccountSpec struct {
	metav1alpha1.CloudFormationMeta `json:",inline"`

	// CloudWatchRoleRef http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-account.html#cfn-apigateway-account-cloudwatchrolearn
	CloudWatchRoleRef string `json:"cloudWatchRoleRef,omitempty" cloudformation:"CloudWatchRoleArn,Parameter"`
}

// AccountStatus defines the observed state of Account
type AccountStatus struct {
	metav1alpha1.StatusMeta `json:",inline"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories=aws;all;apigateway
// +kubebuilder:printcolumn:JSONPath=.status.status,description="status of the stack",name=Status,priority=1,type=string

// Account is the Schema for the accounts API
type Account struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AccountSpec   `json:"spec,omitempty"`
	Status AccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountList contains a list of Account
type AccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Account `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Account{}, &AccountList{})
}

// GetNotificationARNs is an autogenerated deepcopy function, will return notifications for stack
func (in *Account) GetNotificationARNs() []string {
	notifcations := []string{}
	for _, notifarn := range in.Spec.NotificationARNs {
		notifcations = append(notifcations, *notifarn)
	}
	return notifcations
}

// GetTemplate will return the JSON version of the CFN to use.
func (in *Account) GetTemplate() string {
	return "{\"AWSTemplateFormatVersion\":\"2010-09-09\",\"Description\":\"AWS Service Operator - AWS::ApiGateway::Account (aso-0owrq417x)\",\"Parameters\":{\"CloudWatchRoleArn\":{\"Type\":\"String\",\"Description\":\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-account.html#cfn-apigateway-account-cloudwatchrolearn\"}},\"Resources\":{\"Resource\":{\"Type\":\"AWS::ApiGateway::Account\",\"Properties\":{\"CloudWatchRoleArn\":{\"Ref\":\"CloudWatchRoleArn\"}}}}}"
}

// GetStackID will return stackID
func (in *Account) GetStackID() string {
	return in.Status.StackID
}

// GenerateStackName will generate a StackName
func (in *Account) GenerateStackName() string {
	return strings.Join([]string{"apigateway", "account", in.GetName(), in.GetNamespace()}, "-")
}

// GetStackName will return stackName
func (in *Account) GetStackName() string {
	return in.Spec.StackName
}

func (in *Account) GetTemplateVersionLabel() (value string, ok bool) {
	value, ok = in.Labels[controllerutils.StackTemplateVersionLabel]
	return
}

// GetParameters will return CFN Parameters
func (in *Account) GetParameters() map[string]string {
	params := map[string]string{}
	cfnencoder.MarshalTypes(params, in.Spec, "Parameter")
	return params
}

// GetCloudFormationMeta will return CFN meta object
func (in *Account) GetCloudFormationMeta() metav1alpha1.CloudFormationMeta {
	return in.Spec.CloudFormationMeta
}

// GetStatus will return the CFN Status
func (in *Account) GetStatus() metav1alpha1.ConditionStatus {
	return in.Status.Status
}

// SetStackID will put a stackID
func (in *Account) SetStackID(input string) {
	in.Status.StackID = input
	return
}

// SetStackName will return stackName
func (in *Account) SetStackName(input string) {
	in.Spec.StackName = input
	return
}

// SetTemplateVersionLabel will set the template version label
func (in *Account) SetTemplateVersionLabel() {
	if len(in.Labels) == 0 {
		in.Labels = map[string]string{}
	}

	in.Labels[controllerutils.StackTemplateVersionLabel] = controllerutils.ComputeHash(in.Spec)
}

// TemplateVersionChanged will return bool if template has changed
func (in *Account) TemplateVersionChanged() bool {
	// Ignore bool since it will still record changed
	label, _ := in.GetTemplateVersionLabel()
	return label != controllerutils.ComputeHash(in.Spec)
}

// SetStatus will set status for object
func (in *Account) SetStatus(status *metav1alpha1.StatusMeta) {
	in.Status.StatusMeta = *status
}
