/*
Copyright Â© 2019 AWS Controller authors

Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"fmt"
	"strings"

	metav1alpha1 "go.awsctrl.io/manager/apis/meta/v1alpha1"
	controllerutils "go.awsctrl.io/manager/controllers/utils"
	cfnencoder "go.awsctrl.io/manager/encoding/cloudformation"

	"github.com/awslabs/goformation/v4/cloudformation"
	"github.com/awslabs/goformation/v4/cloudformation/apigateway"
	"k8s.io/client-go/dynamic"
)

// GetNotificationARNs is an autogenerated deepcopy function, will return notifications for stack
func (in *Authorizer) GetNotificationARNs() []string {
	notifcations := []string{}
	for _, notifarn := range in.Spec.NotificationARNs {
		notifcations = append(notifcations, *notifarn)
	}
	return notifcations
}

// GetTemplate will return the JSON version of the CFN to use.
func (in *Authorizer) GetTemplate(client dynamic.Interface) (string, error) {
	if client == nil {
		return "", fmt.Errorf("k8s client not loaded for template")
	}
	template := cloudformation.NewTemplate()

	template.Description = "AWS Controller - apigateway.Authorizer (ac-{TODO})"

	template.Outputs = map[string]interface{}{
		"ResourceRef": map[string]interface{}{
			"Value": cloudformation.Ref("Authorizer"),
		},
	}

	apigatewayAuthorizer := &apigateway.Authorizer{}

	if in.Spec.IdentitySource != "" {
		apigatewayAuthorizer.IdentitySource = in.Spec.IdentitySource
	}

	if in.Spec.IdentityValidationExpression != "" {
		apigatewayAuthorizer.IdentityValidationExpression = in.Spec.IdentityValidationExpression
	}

	if in.Spec.Name != "" {
		apigatewayAuthorizer.Name = in.Spec.Name
	}

	// TODO(christopherhein) move these to a defaulter
	apigatewayAuthorizerRestApiItem := in.Spec.RestApi.DeepCopy()

	if apigatewayAuthorizerRestApiItem.ObjectRef.Namespace == "" {
		apigatewayAuthorizerRestApiItem.ObjectRef.Namespace = in.Namespace
	}

	in.Spec.RestApi = *apigatewayAuthorizerRestApiItem
	restApiId, err := in.Spec.RestApi.String(client)
	if err != nil {
		return "", err
	}

	if restApiId != "" {
		apigatewayAuthorizer.RestApiId = restApiId
	}

	if in.Spec.AuthType != "" {
		apigatewayAuthorizer.AuthType = in.Spec.AuthType
	}

	if in.Spec.Type != "" {
		apigatewayAuthorizer.Type = in.Spec.Type
	}

	if in.Spec.AuthorizerCredentials != "" {
		apigatewayAuthorizer.AuthorizerCredentials = in.Spec.AuthorizerCredentials
	}

	if in.Spec.AuthorizerResultTtlInSeconds != apigatewayAuthorizer.AuthorizerResultTtlInSeconds {
		apigatewayAuthorizer.AuthorizerResultTtlInSeconds = in.Spec.AuthorizerResultTtlInSeconds
	}

	if in.Spec.AuthorizerUri != "" {
		apigatewayAuthorizer.AuthorizerUri = in.Spec.AuthorizerUri
	}

	if len(in.Spec.ProviderARNs) > 0 {
		apigatewayAuthorizer.ProviderARNs = in.Spec.ProviderARNs
	}

	template.Resources = map[string]cloudformation.Resource{
		"Authorizer": apigatewayAuthorizer,
	}

	// json, err := template.JSONWithOptions(&intrinsics.ProcessorOptions{NoEvaluateConditions: true})
	json, err := template.JSON()
	if err != nil {
		return "", err
	}

	return string(json), nil
}

// GetStackID will return stackID
func (in *Authorizer) GetStackID() string {
	return in.Status.StackID
}

// GenerateStackName will generate a StackName
func (in *Authorizer) GenerateStackName() string {
	return strings.Join([]string{"apigateway", "authorizer", in.GetName(), in.GetNamespace()}, "-")
}

// GetStackName will return stackName
func (in *Authorizer) GetStackName() string {
	return in.Spec.StackName
}

// GetTemplateVersionLabel will return the stack template version
func (in *Authorizer) GetTemplateVersionLabel() (value string, ok bool) {
	value, ok = in.Labels[controllerutils.StackTemplateVersionLabel]
	return
}

// GetParameters will return CFN Parameters
func (in *Authorizer) GetParameters() map[string]string {
	params := map[string]string{}
	cfnencoder.MarshalTypes(params, in.Spec, "Parameter")
	return params
}

// GetCloudFormationMeta will return CFN meta object
func (in *Authorizer) GetCloudFormationMeta() metav1alpha1.CloudFormationMeta {
	return in.Spec.CloudFormationMeta
}

// GetStatus will return the CFN Status
func (in *Authorizer) GetStatus() metav1alpha1.ConditionStatus {
	return in.Status.Status
}

// SetStackID will put a stackID
func (in *Authorizer) SetStackID(input string) {
	in.Status.StackID = input
	return
}

// SetStackName will return stackName
func (in *Authorizer) SetStackName(input string) {
	in.Spec.StackName = input
	return
}

// SetTemplateVersionLabel will set the template version label
func (in *Authorizer) SetTemplateVersionLabel() {
	if len(in.Labels) == 0 {
		in.Labels = map[string]string{}
	}

	in.Labels[controllerutils.StackTemplateVersionLabel] = controllerutils.ComputeHash(in.Spec)
}

// TemplateVersionChanged will return bool if template has changed
func (in *Authorizer) TemplateVersionChanged() bool {
	// Ignore bool since it will still record changed
	label, _ := in.GetTemplateVersionLabel()
	return label != controllerutils.ComputeHash(in.Spec)
}

// SetStatus will set status for object
func (in *Authorizer) SetStatus(status *metav1alpha1.StatusMeta) {
	in.Status.StatusMeta = *status
}
